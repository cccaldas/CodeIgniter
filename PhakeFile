<?php

/*
	you have to use this structure:
	
	project_folder
		+ dev
			PhakeFile
		+ deploy - will be automatically generated by "config_deploy" function
		
	open dev root folder in terminal and type: phake [command]
*/
define("ENV_TEST", 			"test");
define("ENV_PRODUCTION", 	"production");
define("GIT_USER_NAME", 	"Samus");
define("GIT_USER_EMAIL", 	"samus@samus.com.br");

function get_config($environment) {
	$config = array();
	$config["ENVIRONMENT"] = $environment;
	
	switch ($environment) {
		case ENV_TEST:
			$config["USER"] 					= "user";
			$config["HOST"] 					= "domain.com";
			$config["ROOT"] 					= "/home2/user/";
			$config["REMOTE_WORK_DIR"] 			= "/home2/user/public_html/";
			$config["REMOTE_DEPLOY_DIR"] 		= "/home2/user/deploy.git";
			$config["LOCAL_DEPLOY_DIR"] 		= "../../deploy/server";
			$config["LOCAL_DEPLOY_BRANCH"] 		= "deploy";
			$config["REMOTE_DEPLOY_BRANCH"] 	= "deploy";
			$config["DEV_FOLDER"] 				= "./";
		break;
		
		case ENV_PRODUCTION:
			$config["USER"] 					= "user";
			$config["HOST"] 					= "domain.com";
		break;
	}
	
	return $config;
}

function config_deploy_test() 		{ config_deploy(get_config(ENV_TEST)); }
function config_deploy_production() { config_deploy(get_config(ENV_PRODUCTION)); }

function config_deploy($config) {
	
	$tmp_deploy_folder = uniqid();
	
	$command = "ssh ".$config["USER"]."@".$config["HOST"]." '
	if [ -d ".$config["REMOTE_DEPLOY_DIR"]." ];
	then
		rm -rf ".$config["REMOTE_DEPLOY_DIR"]."
	fi 
	mkdir -p ".$config["REMOTE_DEPLOY_DIR"]."
	cd ".$config["REMOTE_DEPLOY_DIR"]."
	git config --global user.name \"". GIT_USER_NAME ."\"
	git config --global user.email \"". GIT_USER_EMAIL ."\"
	git init --bare
	cd hooks
	> post-receive
	echo \"#!/bin/sh\" > post-receive
	echo \"GIT_WORK_TREE=".$config["REMOTE_WORK_DIR"]." git checkout -f ".$config["REMOTE_DEPLOY_BRANCH"]."\" >> post-receive
	chmod a+x post-receive
	
	mkdir ".$config["REMOTE_WORK_DIR"]."

	#first commit
	cd ../../
	mkdir ".$tmp_deploy_folder."
	cd ".$tmp_deploy_folder."
	git init
	echo \"readme\" > README
	git add --all
	git commit -m \"first commit\" --all
	git branch ".$config["REMOTE_DEPLOY_BRANCH"]."
	git checkout ".$config["REMOTE_DEPLOY_BRANCH"]."
	git branch -d master
	git remote add deploy ".$config["REMOTE_DEPLOY_DIR"]."
	git push deploy ".$config["LOCAL_DEPLOY_BRANCH"].":".$config["REMOTE_DEPLOY_BRANCH"]."
	cd ..
	rm -rf ".$tmp_deploy_folder."
	'
	";

	//echo $command; exit();
	
	echo shell_exec($command);
	echo shell_exec("
		if [ -d ".$config["LOCAL_DEPLOY_DIR"]." ];
		then
			rm -rf ".$config["LOCAL_DEPLOY_DIR"]."	
		fi
	");

	clone_remote($config);
}

function clone_remote($config) {
	echo shell_exec("git clone ".$config["USER"]."@".$config["HOST"].":".$config["REMOTE_DEPLOY_DIR"]." -b ".$config["REMOTE_DEPLOY_BRANCH"]." ".$config["LOCAL_DEPLOY_DIR"]." -o online");
}

function deploy_test() 			{ deploy(get_config(ENV_TEST)); }
function deploy_production() 	{ deploy(get_config(ENV_PRODUCTION)); }

function deploy($config) {
	
	$version_file = $config["LOCAL_DEPLOY_DIR"].'/version';
	if(!file_exists($version_file))
		shell_exec('echo 0 > '.$version_file);
		
	$version = (int)shell_exec('cat '.$version_file);
	$version += 1;
	shell_exec('echo '.$version.' > '.$version_file);
	
	$command = "
	rsync -avz --delete --exclude '.git' --exclude 'version' ".$config["DEV_FOLDER"]." ".$config["LOCAL_DEPLOY_DIR"]."
	cd ".$config["LOCAL_DEPLOY_DIR"]."
	if [ -f PhakeFile ];
	then
		rm PhakeFile
	fi
	rm .htaccess
	mv .htaccess.". $config["ENVIRONMENT"] ." .htaccess
	git-commit \"deploy ".$version."\"
	echo \"pushing to online...\"
	git push online ".$config["LOCAL_DEPLOY_BRANCH"].":".$config["REMOTE_DEPLOY_BRANCH"]."
	";
	
	echo shell_exec($command);
}

function deploy_db_test() {
	setlocale(LC_ALL, "pt_BR");
	date_default_timezone_set("America/Sao_Paulo");
	
    require_once 'server/app/lib/sf/AppConfiguration.php';
    require_once 'server/app/system/DevelopmentConfiguration.php';
    require_once 'server/app/system/TestConfiguration.php';
    
    $devConfig = new DevelopmentConfiguration();
    $devConfig = $devConfig->getConfigArray();
    $devConfig = $devConfig[1];
    
    
    $testConfig = new TestConfiguration();
    $testConfig = $testConfig->getConfigArray();
    $testConfig = $testConfig[1];
    
    $localBackupFile = "db/backup_db.".$devConfig['databaseName'].'_'.date('d_m_y__H_i_s').".sql";
    
    $command = "
	if [ ! -d db ];
	then
		mkdir db 
		chmod -R a+rwx db 
	fi
	
	mysqldump -h {$devConfig['databaseHost']} -u {$devConfig['databaseUserName']} -p{$devConfig["databasePassword"]} {$devConfig['databaseName']} > $localBackupFile;
	mysql -h {$testConfig["databaseHost"]} -u {$testConfig["databaseUserName"]} -p{$testConfig["databasePassword"]} {$testConfig['databaseName']} -e 'SET foreign_key_checks = 0;';
	
	mysql -h {$testConfig["databaseHost"]} -u {$testConfig["databaseUserName"]} -p{$testConfig["databasePassword"]} {$testConfig['databaseName']} < $localBackupFile;

	mysql -h {$testConfig["databaseHost"]} -u {$testConfig["databaseUserName"]} -p{$testConfig["databasePassword"]} {$testConfig['databaseName']} -e 'SET foreign_key_checks = 1;';
	
	";
	
	//echo $command;
	echo shell_exec($command);
}

function rollback() {
	$command = "ssh ".USER."@".HOST." '
	cd ".REMOTE_DEPLOY_DIR."
	git update-ref refs/heads/".REMOTE_DEPLOY_BRANCH." HEAD~1
	./hooks/post-receive
	'
	";
	
	echo shell_exec($command);
}
	
?>